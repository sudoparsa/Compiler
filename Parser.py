first = {'Program': ['$', 'int', 'void'], 'Declaration-list': ['int', 'void', 'epsilon'], 'Declaration': ['int', 'void'], 'Declaration-initial': ['int', 'void'], 'Declaration-prime': [';', '[', '('], 'Var-declaration-prime': [';', '['], 'Fun-declaration-prime': ['('], 'Type-specifier': ['int', 'void'], 'Params': ['int', 'void'], 'Param-list': [',', 'epsilon'], 'Param': ['int', 'void'], 'Param-prime': ['[', 'epsilon'], 'Compound-stmt': ['{'], 'Statement-list': ['ID', ';', 'NUM', '(', '{', 'break', 'if', 'repeat', 'return', 'epsilon'], 'Statement': ['ID', ';', 'NUM', '(', '{', 'break', 'if', 'repeat', 'return'], 'Expression-stmt': ['ID', ';', 'NUM', '(', 'break'], 'Selection-stmt': ['if'], 'Else-stmt': ['endif', 'else'], 'Iteration-stmt': ['repeat'], 'Return-stmt': ['return'], 'Return-stmt-prime': ['ID', ';', 'NUM', '('], 'Expression': ['ID', 'NUM', '('], 'B': ['[', '(', '=', '<', '==', '+', '-', '*', 'epsilon'], 'H': ['=', '<', '==', '+', '-', '*', 'epsilon'], 'Simple-expression-zegond': ['NUM', '('], 'Simple-expression-prime': ['(', '<', '==', '+', '-', '*', 'epsilon'], 'C': ['<', '==', 'epsilon'], 'Relop': ['<', '=='], 'Additive-expression': ['ID', 'NUM', '('], 'Additive-expression-prime': ['(', '+', '-', '*', 'epsilon'], 'Additive-expression-zegond': ['NUM', '('], 'D': ['+', '-', 'epsilon'], 'Addop': ['+', '-'], 'Term': ['ID', 'NUM', '('], 'Term-prime': ['(', '*', 'epsilon'], 'Term-zegond': ['NUM', '('], 'G': ['*', 'epsilon'], 'Factor': ['ID', 'NUM', '('], 'Var-call-prime': ['[', '(', 'epsilon'], 'Var-prime': ['[', 'epsilon'], 'Factor-prime': ['(', 'epsilon'], 'Factor-zegond': ['NUM', '('], 'Args': ['ID', 'NUM', '(', 'epsilon'], 'Arg-list': ['ID', 'NUM', '('], 'Arg-list-prime': [',', 'epsilon']}

follow = {'Program': [''], 'Declaration-list': ['$', 'ID', ';', 'NUM', '(', '{', '}', 'break', 'if', 'repeat', 'return'], 'Declaration': ['$', 'ID', ';', 'NUM', '(', 'int', 'void', '{', '}', 'break', 'if', 'repeat', 'return'], 'Declaration-initial': [';', '[', '(', ')', ','], 'Declaration-prime': ['$', 'ID', ';', 'NUM', '(', 'int', 'void', '{', '}', 'break', 'if', 'repeat', 'return'], 'Var-declaration-prime': ['$', 'ID', ';', 'NUM', '(', 'int', 'void', '{', '}', 'break', 'if', 'repeat', 'return'], 'Fun-declaration-prime': ['$', 'ID', ';', 'NUM', '(', 'int', 'void', '{', '}', 'break', 'if', 'repeat', 'return'], 'Type-specifier': ['ID'], 'Params': [')'], 'Param-list': [')'], 'Param': [')', ','], 'Param-prime': [')', ','], 'Compound-stmt': ['$', 'ID', ';', 'NUM', '(', 'int', 'void', '{', '}', 'break', 'if', 'endif', 'else', 'repeat', 'until', 'return'], 'Statement-list': ['}'], 'Statement': ['ID', ';', 'NUM', '(', '{', '}', 'break', 'if', 'endif', 'else', 'repeat', 'until', 'return'], 'Expression-stmt': ['ID', ';', 'NUM', '(', '{', '}', 'break', 'if', 'endif', 'else', 'repeat', 'until', 'return'], 'Selection-stmt': ['ID', ';', 'NUM', '(', '{', '}', 'break', 'if', 'endif', 'else', 'repeat', 'until', 'return'], 'Else-stmt': ['ID', ';', 'NUM', '(', '{', '}', 'break', 'if', 'endif', 'else', 'repeat', 'until', 'return'], 'Iteration-stmt': ['ID', ';', 'NUM', '(', '{', '}', 'break', 'if', 'endif', 'else', 'repeat', 'until', 'return'], 'Return-stmt': ['ID', ';', 'NUM', '(', '{', '}', 'break', 'if', 'endif', 'else', 'repeat', 'until', 'return'], 'Return-stmt-prime': ['ID', ';', 'NUM', '(', '{', '}', 'break', 'if', 'endif', 'else', 'repeat', 'until', 'return'], 'Expression': [';', ']', ')', ','], 'B': [';', ']', ')', ','], 'H': [';', ']', ')', ','], 'Simple-expression-zegond': [';', ']', ')', ','], 'Simple-expression-prime': [';', ']', ')', ','], 'C': [';', ']', ')', ','], 'Relop': ['ID', 'NUM', '('], 'Additive-expression': [';', ']', ')', ','], 'Additive-expression-prime': [';', ']', ')', ',', '<', '=='], 'Additive-expression-zegond': [';', ']', ')', ',', '<', '=='], 'D': [';', ']', ')', ',', '<', '=='], 'Addop': ['ID', 'NUM', '('], 'Term': [';', ']', ')', ',', '<', '==', '+', '-'], 'Term-prime': [';', ']', ')', ',', '<', '==', '+', '-'], 'Term-zegond': [';', ']', ')', ',', '<', '==', '+', '-'], 'G': [';', ']', ')', ',', '<', '==', '+', '-'], 'Factor': [';', ']', ')', ',', '<', '==', '+', '-', '*'], 'Var-call-prime': [';', ']', ')', ',', '<', '==', '+', '-', '*'], 'Var-prime': [';', ']', ')', ',', '<', '==', '+', '-', '*'], 'Factor-prime': [';', ']', ')', ',', '<', '==', '+', '-', '*'], 'Factor-zegond': [';', ']', ')', ',', '<', '==', '+', '-', '*'], 'Args': [')'], 'Arg-list': [')'], 'Arg-list-prime': [')']}
